#!/usr/local/bin/python3

import sys
import os
import json

__version__ = 1.0
__author__ = 'tao'

home_dir = os.path.expanduser('~')
db_file = '.telp.json'
db_path = os.path.join(home_dir, db_file)

model_dict = {}


def init():
    if not os.path.exists(db_path):
        with open(db_path, 'w+') as f:
            print('initialize successfully')
        return
    with open(db_path, 'r') as f:
        content = f.read()
        try:
            model_dict.update(json.loads(content))
        except:
            pass


def usage():
    print('telp usage:\n')
    print('$telp command-keyword "command model"')
    print('   save the command model to the telp')
    print('$telp command-keyword')
    print('   show command models related to the command-keyword')
    print('$telp command-keyword *(del) index')
    print('   delete the index command models related to the command-keyword')


def print_models():
    spoon = sys.argv[1]
    models = model_dict.get(spoon)
    if not models:
        print("not found")
    else:
        for i, m in enumerate(models):
            formatted_model = "{:<5}{}".format(i, m)
            print(formatted_model)


def save(model_dict):
    with open(db_path, 'w') as f:
        # ensure_ascii = False 可以保证中文不被转码, 方便查看
        f.write(json.dumps(model_dict, indent=2, ensure_ascii=False))


def add_model():
    spoon = sys.argv[1]
    model_dict[spoon] = model_dict.get(spoon, []) + sys.argv[2:]
    save(model_dict)
    print('model added')


def delete_model():
    spoon = sys.argv[1]
    index = int(sys.argv[3])
    model_list = model_dict[spoon]
    del model_list[index]
    save(model_dict)
    print('model deleted')


def main():
    argc = len(sys.argv)
    actions = {
        2: print_models,
        3: add_model,
        4: delete_model,
    }
    action = actions.get(argc, usage)
    action()


if __name__ == '__main__':
    init()
    main()
